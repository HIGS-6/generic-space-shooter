"""
# DO NOT EDIT THIS FILE #
"""
import asyncio
from .game_object import GameObject
from .input_manager import InputManager
from .physic_sprite import PhysicSprite
from .sound_manager import SoundManager
from .sprite import Sprite
from .world import World
from .transform import Transform
from .vec2 import Vec2
import os

# I WANT THIS TO STAY LIKE THIS
os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = '0'
try:
    import pygame as pg  # THIS RIGHT HEREEE
    pg.init()
except:
    print('Failed to Initialize PyGame')
# IN THIS PARTICULAR ORDER, THANKS FORMATTER.


try:
    pg.mixer.init()
except:
    print('Failed to initialize Mixer')

try:
    pg.font.init()
except Exception as e:
    print('Failed to initialize Font')


class TitoEngine:
    def __init__(self, win_title: str = 'Tito Engine Game', win_resolution: tuple[int, int] | None = None, colour_fill: tuple[int, int, int] = (255, 255, 255), fps: int = 60, run_first_tick=[lambda: print('Tito Engine Ready.')]):
        pg.display.set_caption(win_title)

        self._run_first_tick = run_first_tick
        info = pg.display.Info()
        self.WIN = pg.display.set_mode(win_resolution if win_resolution else (
            info.current_w, info.current_h), pg.SCALED, pg.FULLSCREEN | pg.HWSURFACE | pg.DOUBLEBUF)
        self.CLOCK = pg.time.Clock()
        self.FPS = fps
        self.COLOUR_FILL = colour_fill

        self.initialized = True
        # print('Tito Engine Initialized Successfully')

    def run(self, game_objects: list[GameObject] = []):
        asyncio.run(self._run(game_objects))

    async def _run(self, game_objects: list[GameObject] = []):
        self.world = World(self.WIN, game_objects)

        for go in self.world.game_objects:
            if issubclass(type(go), Sprite) or type(go) is Sprite:
                go.original_img = go.original_img.convert_alpha()

        first_tick = False
        # Main Loop
        while 1:
            if not first_tick:
                first_tick = True
                list(map(lambda f: f(), self._run_first_tick))

            # Updating window
            TitoEngine.FPS = self.CLOCK.get_fps()
            DT = self.CLOCK.tick() / 1000.0
            self.WIN.fill(self.COLOUR_FILL)
            self.world.update(DT)

            # Close Window when 'X' pressed
            for event in pg.event.get():
                if event.type == pg.QUIT:
                    pg.quit()
                    return 0

            pg.display.update()
            await asyncio.sleep(0)
